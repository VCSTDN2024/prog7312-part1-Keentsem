@page
@model MunicipalServicesApp.Pages.LeaderboardModel
@{
    ViewData["Title"] = "Community Leaderboard - South African Municipal Services";
}

<div class="container">
    <!-- Header Section -->
    <div class="row mb-5">
        <div class="col-12 text-center">
            <div class="badge-header">
                <h1 class="display-4 fw-bold mb-3">
                    <i class="fas fa-trophy me-3"></i>ðŸ‡¿ðŸ‡¦ Community Leaderboard
                </h1>
                <p class="lead">Top contributors to South African municipal services</p>
            </div>
        </div>
    </div>

    <!-- Statistics Overview -->
    <div class="row mb-5">
        <div class="col-md-3 mb-3">
            <div class="card badge-stat-card">
                <div class="card-body text-center">
                    <div class="badge-stat-icon">
                        <i class="fas fa-users fa-2x text-primary"></i>
                    </div>
                    <h3 class="card-title text-primary">@Model.Metrics.TotalUsers</h3>
                    <p class="card-text">Active Users</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card badge-stat-card">
                <div class="card-body text-center">
                    <div class="badge-stat-icon">
                        <i class="fas fa-list-alt fa-2x text-success"></i>
                    </div>
                    <h3 class="card-title text-success">@Model.Metrics.TotalIssues</h3>
                    <p class="card-text">Issues Reported</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card badge-stat-card">
                <div class="card-body text-center">
                    <div class="badge-stat-icon">
                        <i class="fas fa-star fa-2x text-warning"></i>
                    </div>
                    <h3 class="card-title text-warning">@Model.Metrics.TotalPointsAwarded</h3>
                    <p class="card-text">Points Awarded</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card badge-stat-card">
                <div class="card-body text-center">
                    <div class="badge-stat-icon">
                        <i class="fas fa-medal fa-2x text-info"></i>
                    </div>
                    <h3 class="card-title text-info">@Model.Metrics.TotalBadgesEarned</h3>
                    <p class="card-text">Badges Earned</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Community Insights & Analytics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-pie me-2"></i>Community Insights & Analytics
                        <small class="d-block">Deep analysis of community engagement and service patterns</small>
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <button type="button" class="btn btn-outline-primary w-100" onclick="performRecursiveAnalysis('countByLevel')">
                                <i class="fas fa-users me-2"></i>Community Engagement
                            </button>
                            <small class="text-muted d-block mt-1">Analyze citizen participation levels</small>
                        </div>
                        <div class="col-md-3 mb-3">
                            <button type="button" class="btn btn-outline-success w-100" onclick="performRecursiveAnalysis('filterByProvince')">
                                <i class="fas fa-map-marker-alt me-2"></i>Regional Analysis
                            </button>
                            <small class="text-muted d-block mt-1">Compare service needs across regions</small>
                        </div>
                        <div class="col-md-3 mb-3">
                            <button type="button" class="btn btn-outline-warning w-100" onclick="performRecursiveAnalysis('calculateTotalPoints')">
                                <i class="fas fa-trophy me-2"></i>Community Rewards
                            </button>
                            <small class="text-muted d-block mt-1">Calculate community contribution scores</small>
                        </div>
                        <div class="col-md-3 mb-3">
                            <button type="button" class="btn btn-outline-info w-100" onclick="performRecursiveAnalysis('findTopContributors')">
                                <i class="fas fa-star me-2"></i>Top Contributors
                            </button>
                            <small class="text-muted d-block mt-1">Identify community champions</small>
                        </div>
                    </div>
                    <div id="recursive-results" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Contributors -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">
                <i class="fas fa-crown me-2"></i>Top Community Contributors
            </h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Rank</th>
                            <th>Contributor</th>
                            <th>Points</th>
                            <th>Reports</th>
                            <th>Level</th>
                            <th>Municipality</th>
                            <th>Badges</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.Leaderboard)
                        {
                            <tr class="@(user.Rank <= 3 ? "table-warning" : "")">
                                <td>
                                    @if (user.Rank == 1)
                                    {
                                        <i class="fas fa-crown text-warning"></i>
                                    }
                                    else if (user.Rank == 2)
                                    {
                                        <i class="fas fa-medal text-secondary"></i>
                                    }
                                    else if (user.Rank == 3)
                                    {
                                        <i class="fas fa-award text-warning"></i>
                                    }
                                    <strong>#@user.Rank</strong>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="user-avatar me-2">
                                            <i class="fas fa-user-circle fa-2x text-primary"></i>
                                        </div>
                                        <div>
                                            <strong>@user.UserName</strong>
                                            <br>
                                            <small class="text-muted">@user.UserEmail</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-primary fs-6">@user.TotalPoints</span>
                                </td>
                                <td>@user.ReportsSubmitted</td>
                                <td>
                                    <span class="badge bg-@(user.Level.ToString().ToLower())">
                                        @user.Level
                                    </span>
                                </td>
                                <td>
                                    <small>@user.Municipality</small>
                                    <br>
                                    <small class="text-muted">@user.Province</small>
                                </td>
                                <td>
                                    <span class="badge bg-success">@user.BadgeIds.Count</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Municipality Statistics -->
    <div class="row mb-5">
        <div class="col-12">
            <h2 class="text-center mb-4">
                <i class="fas fa-map-marker-alt me-2"></i>Municipality Performance
            </h2>
            <div class="row">
                @foreach (var municipality in Model.MunicipalityStats)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@municipality.MunicipalityName</h5>
                                <p class="card-text text-muted">@municipality.Province</p>
                                <div class="row text-center">
                                    <div class="col-4">
                                        <div class="fw-bold text-primary">@municipality.TotalIssues</div>
                                        <small>Total Issues</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="fw-bold text-success">@municipality.ResolvedIssues</div>
                                        <small>Resolved</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="fw-bold text-info">@municipality.ResolutionRate.ToString("F1")%</div>
                                        <small>Resolution Rate</small>
                                    </div>
                                </div>
                                <div class="progress mt-3" style="height: 8px;">
                                    <div class="progress-bar" role="progressbar" 
                                         style="width: @municipality.ResolutionRate%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Category Distribution -->
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-4">
                <i class="fas fa-chart-pie me-2"></i>Issue Categories Distribution
            </h2>
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        @foreach (var category in Model.CategoryStats)
                        {
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="d-flex justify-content-between align-items-center p-2 border rounded">
                                    <span class="fw-bold">@category.Key</span>
                                    <span class="badge bg-primary">@category.Value</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add animation to table rows
        document.addEventListener('DOMContentLoaded', function() {
            const rows = document.querySelectorAll('tbody tr');
            rows.forEach((row, index) => {
                setTimeout(() => {
                    row.style.opacity = '0';
                    row.style.transform = 'translateX(-20px)';
                    row.style.transition = 'all 0.5s ease';
                    
                    setTimeout(() => {
                        row.style.opacity = '1';
                        row.style.transform = 'translateX(0)';
                    }, 100);
                }, index * 100);
            });
        });

        // Recursive Analysis Functions
        function performRecursiveAnalysis(analysisType) {
            const startTime = performance.now();
            let result;
            
            // Get leaderboard data from the table
            const leaderboardData = extractLeaderboardData();
            
            switch(analysisType) {
                case 'countByLevel':
                    result = countByLevelRecursive(leaderboardData, 0);
                    break;
                case 'filterByProvince':
                    result = filterByProvinceRecursive(leaderboardData, 0);
                    break;
                case 'calculateTotalPoints':
                    result = calculateTotalPointsRecursive(leaderboardData, 0);
                    break;
                case 'findTopContributors':
                    result = findTopContributorsRecursive(leaderboardData, 0, 3);
                    break;
            }
            
            const endTime = performance.now();
            const executionTime = (endTime - startTime).toFixed(2);
            
            displayRecursiveResults(analysisType, result, executionTime);
        }
        
        // Extract data from the leaderboard table
        function extractLeaderboardData() {
            const rows = document.querySelectorAll('tbody tr');
            const data = [];
            
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 7) {
                    data.push({
                        rank: parseInt(cells[0].textContent.replace(/\D/g, '')),
                        name: cells[1].querySelector('strong').textContent,
                        points: parseInt(cells[2].textContent),
                        reports: parseInt(cells[3].textContent),
                        level: cells[4].textContent.trim(),
                        municipality: cells[5].querySelector('small').textContent,
                        province: cells[5].querySelectorAll('small')[1].textContent,
                        badges: parseInt(cells[6].textContent)
                    });
                }
            });
            
            return data;
        }
        
        // Recursive function to count users by level
        function countByLevelRecursive(data, index) {
            if (index >= data.length) {
                return {};
            }
            
            const current = data[index];
            const level = current.level;
            const remaining = countByLevelRecursive(data, index + 1);
            
            if (remaining[level]) {
                remaining[level]++;
            } else {
                remaining[level] = 1;
            }
            
            return remaining;
        }
        
        // Recursive function to filter users by province
        function filterByProvinceRecursive(data, index) {
            if (index >= data.length) {
                return [];
            }
            
            const current = data[index];
            const remaining = filterByProvinceRecursive(data, index + 1);
            
            // Group by province
            const province = current.province;
            if (!remaining.find(group => group.province === province)) {
                remaining.push({
                    province: province,
                    users: []
                });
            }
            
            const group = remaining.find(group => group.province === province);
            group.users.push(current);
            
            return remaining;
        }
        
        // Recursive function to calculate total points
        function calculateTotalPointsRecursive(data, index) {
            if (index >= data.length) {
                return 0;
            }
            
            return data[index].points + calculateTotalPointsRecursive(data, index + 1);
        }
        
        // Recursive function to find top contributors
        function findTopContributorsRecursive(data, index, count) {
            if (index >= data.length || count <= 0) {
                return [];
            }
            
            const current = data[index];
            const remaining = findTopContributorsRecursive(data, index + 1, count - 1);
            
            if (current.points > 0) {
                remaining.unshift(current);
            }
            
            return remaining.slice(0, count);
        }
        
        // Display recursive analysis results
        function displayRecursiveResults(analysisType, result, executionTime) {
            const resultsDiv = document.getElementById('recursive-results');
            let html = '';
            
            switch(analysisType) {
                case 'countByLevel':
                    html = `
                        <div class="alert alert-primary">
                            <h6><i class="fas fa-calculator me-2"></i>Recursive Count by Level (O(n) complexity)</h6>
                            <div class="row">
                                ${Object.entries(result).map(([level, count]) => 
                                    `<div class="col-md-3"><strong>${level}:</strong> ${count} users</div>`
                                ).join('')}
                            </div>
                            <small class="text-muted">Executed in ${executionTime}ms using recursive counting algorithm</small>
                        </div>
                    `;
                    break;
                    
                case 'filterByProvince':
                    html = `
                        <div class="alert alert-success">
                            <h6><i class="fas fa-filter me-2"></i>Recursive Filter by Province (O(n) complexity)</h6>
                            <div class="row">
                                ${result.map(group => 
                                    `<div class="col-md-4 mb-2">
                                        <strong>${group.province}:</strong> ${group.users.length} users
                                        <br><small class="text-muted">${group.users.map(u => u.name).join(', ')}</small>
                                    </div>`
                                ).join('')}
                            </div>
                            <small class="text-muted">Executed in ${executionTime}ms using recursive filtering algorithm</small>
                        </div>
                    `;
                    break;
                    
                case 'calculateTotalPoints':
                    html = `
                        <div class="alert alert-warning">
                            <h6><i class="fas fa-star me-2"></i>Recursive Total Points Calculation (O(n) complexity)</h6>
                            <div class="text-center">
                                <h3 class="text-primary">${result.toLocaleString()} Total Points</h3>
                                <p class="mb-0">Accumulated across all community contributors</p>
                            </div>
                            <small class="text-muted">Executed in ${executionTime}ms using recursive accumulation algorithm</small>
                        </div>
                    `;
                    break;
                    
                case 'findTopContributors':
                    html = `
                        <div class="alert alert-info">
                            <h6><i class="fas fa-search me-2"></i>Recursive Top Contributors Search (O(n) complexity)</h6>
                            <div class="row">
                                ${result.map((user, index) => 
                                    `<div class="col-md-4 mb-2">
                                        <div class="card">
                                            <div class="card-body p-2">
                                                <h6 class="card-title mb-1">#${index + 1} ${user.name}</h6>
                                                <p class="card-text mb-1">
                                                    <small>${user.points} points â€¢ ${user.reports} reports</small>
                                                </p>
                                                <small class="text-muted">${user.province}</small>
                                            </div>
                                        </div>
                                    </div>`
                                ).join('')}
                            </div>
                            <small class="text-muted">Executed in ${executionTime}ms using recursive search algorithm</small>
                        </div>
                    `;
                    break;
            }
            
            resultsDiv.innerHTML = html;
        }
    </script>
}
